<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Magnil的博客]]></title>
  <link href="http://Magnil.github.com/atom.xml" rel="self"/>
  <link href="http://Magnil.github.com/"/>
  <updated>2013-04-14T21:30:03+08:00</updated>
  <id>http://Magnil.github.com/</id>
  <author>
    <name><![CDATA[Magnil]]></name>
    <email><![CDATA[lovcrimson@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一切都是混搭]]></title>
    <link href="http://Magnil.github.com/blog/2013/04/14/everything-is-a-remix/"/>
    <updated>2013-04-14T14:42:00+08:00</updated>
    <id>http://Magnil.github.com/blog/2013/04/14/everything-is-a-remix</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p><em>我们的创造力源于外部，而非内部。我们并非通过自身努力就能成功。我们需要相互依赖，并且承认这一点并不意味着拥抱平庸和模仿他人，而是能把我们从误解中解放出来。这还会促使我们不要从自己身上期望太多，鼓励我们轻装上阵。—— Kirby Ferguson</em></p>

<p>知识产权在国内网络环境中仿佛一个不能触碰的敏感话题，凡是对其有任何异议，都会被打入“窃贼”的行列，现实社会里大众的版权漠视心态更是助长了这一观念的滋生，戾气颇重。</p>

<p>而另一方面，掌握着话语权的媒体大肆宣传国内的“山寨”行径，一时之间仿佛山寨成为了国人的劣根性，殊不知这是全世界共通的人的天性。或出于心理上的自卑感，或出于对被山寨作品的愧疚，大众对知识产权的认识反而到了矫枉过正的地步——凡是<em>我</em>觉得相似的，不管思想是否存在撞车的可能，不管技术上是否达到侵权标准，不在乎相关法律的规定和业界规则，只要我认定是，那必定是抄袭。</p>

<p>我说的是国内许多 IT 企业所面临的莫须有的山寨指责（当然，也有很多是应得的）；我说是文艺作品里常常被我们误指作抄袭的电影、小说、电视剧、音乐等等；我说是同人圈里有些人对抄袭的认定已经到了姿势都不能一样的地步，对于自己的同人创作视为禁脔，却很少有人在自己的同人作品里标注<em>权利归原作所有</em>。</p>

<p>这些都是相当危险的想法，这表示我们对于创作的本源和自身的模仿天性，已经忽视到了无可附加的地步。所以我决定翻译这个视频，给大家提供另外一个视角。</p>

<!-- more -->


<p>遗憾是，该纪录片只是提出了创造力的真相，对于知识产权的部分的探讨并不够深入，对此部分可以参考 Ted 上 Creative Common 创始人 Larry Lessig 的演讲——<a href="http://www.ted.com/talks/larry_lessig_says_the_law_is_strangling_creativity.html">法律如何扼杀创造力</a>。国内观众如果缓冲太慢，请点击此处<a href="http://v.youku.com/v_show/id_XNDkwNTA5OTgw.html">优酷版</a>。</p>

<p>为了避免被误解或是被滥用，需要特别申明的是，无论是视频原作者还是我，持这样的观点并不是彻头彻底的反版权人士，亦不是为盗版行为辩护——而是我们需要重新正视知识版权法的原本初衷，在创作的自由和法律的公平之间，寻求一个平衡点。</p>

<p>正如 Larry Lessig 所说：<em>“我们看到的是比反抗（版权制度）更危险的东西，冲突双方都陷入了极端主义的怪圈。在这次争端中，法律和新兴技术互不相让……（中略）……一方的极端主义会使另一方效仿，这是我们早该认清不知道多少次的事实。这一冲突中的两个极端都是错误的，而我所要争取的一个平衡点。”</em></p>

<p>视频开始：</p>

<div><object id='sinaplayer' width='640' height='480' ><param name='allowScriptAccess' value='always' /><embed pluginspage='http://www.macromedia.com/go/getflashplayer' src='http://you.video.sina.com.cn/api/sinawebApi/outplayrefer.php/vid=101599617_1804531244_PxixHCU5XmXK+l1lHz2stqlF+6xCpv2xhGu8u1ahJg9bUQiYJMXNb9wH4SzfCclD9noLHcwydP4n0hQkbqtf/s.swf' type='application/x-shockwave-flash' name='sinaplayer' allowFullScreen='true' allowScriptAccess='always' width='640' height='480'></embed></object></div>


<p>为方便无法观看视频的读者，以下是经过重新润色后的文字整理版。</p>

<h2>第一部：旧调重弹</h2>

<h3>早期的 remix</h3>

<p>Remix，是指将现有的素材组合或编辑，创作出新的作品。这个说法始出于音乐界，并随着上世纪末的 hip-hop 浪潮而兴起。Remix 也是第一个从现有录音中采样的音乐形式。</p>

<p>早期案例：糖山帮（the Sugarhill Gang）从 Chic 乐队的 Good Times 采样了贝斯 riff，并用在自己1979 年的热门单曲 Rapper&#8217;s Delight 中。之后这段贝斯被多次使用于各个作品中。
<em>注：Rapper&#8217;s Delight 被认为是将 hip-hop 概念推向大众的第一首歌。</em></p>

<p>时至今日，任何人可以 remix 任何东西——音乐、视频、照片，随你高兴——并且瞬间散布到全世界。你不需要昂贵的工具，不需要批发商，甚至都不需要什么技巧。Remix 是平民艺术，任何人都能做到。</p>

<p>搜集、组合和转化素材，这些手法正是我们在各种层次的创作中都要用到的。你甚至可以说，<strong>一切都是混搭（everything is a remix）</strong>。</p>

<p>为了解释这一观点，我们从1968年的英国开始说起。Jimmy Page 找来 John Paul Jones、Robert Plant 和John Bonham，组成齐柏林飞船（Led Zeppelin）。他们演奏的蓝调音乐极其喧闹，因此很快被称作……哦，等等，我们还是先从1961年的巴黎讲起。</p>

<p>William Burroughs 在他的小说 The Soft Machine 中首创了“重金属（heavy metal）”这一说法。这本书以剪纸的方式写成：把现有的文章剪散，然后重新排列为新的文章。所以 1961年 William Burroughs 不只发明了“重金属”一词——这种以齐柏林飞船等乐队为先锋的音乐风格，他同时也创作出早期的 remix 作品。</p>

<h3>齐柏林飞船</h3>

<p>回到齐柏林。70年代中期，齐柏林飞船是全美最大的巡回摇滚乐团，然而乐评人和对手却称他们为“山寨乐队（rip-offs）”。事情是这样的：</p>

<ul>
<li>Bring it on Home 开头和结尾部分旋律是从 Willie Dixon 那里偷来的。被借用的歌名也是 Bring it on Home，这当然不是巧合；</li>
<li>The Lemon Song 从 Howlin&#8217; Wolf 的 Killing Floor 中抄来了大量的歌词；</li>
<li>Black Mountain Side 的旋律使用了 Bert Jansch 改编版的传统民谣曲 Blackwaterside；</li>
<li>虽然改了歌词，但 Dazed and Confused 这首歌显然是未授权的 Jake Holmes 同名歌曲改编。奇怪的是直到 40 多年后，Holmes 才于 2010 年提起诉讼；</li>
<li>最有名的是，Stairway to Heaven 从 Spirit 乐队的 Taurus 借用了开头。齐柏林和 Spirit 曾于1968 年同台演出。三年后，Stairway to Heaven 问世。</li>
</ul>


<p>显然齐柏林挪用了大量的他人素材，但这种行为本身其实并不少见。他们只有两点和其他人不一样：</p>

<ol>
<li>首先，齐柏林在用了他人素材后，他们并不把歌曲归功于原作者。大多数英式蓝调乐团虽然录制了许多翻唱，但不会像齐柏林一样直接宣称是自己写的。</li>
<li>其次，齐柏林对作品修改的并不算彻底，也就是说其作品并不足以称为原创。许多乐队模仿前人的表演，但他们倾向于仿效歌曲的大致基调，而非特定歌词或旋律。而齐柏林的模仿，并没有作出根本性的改变。</li>
</ol>


<p>因此，这两点：</p>

<ol>
<li>改编：演奏他人的素材</li>
<li>挪用：在合法范围内抄袭</li>
</ol>


<p>这些是合法 remix 的经典范例，也几乎涵盖了娱乐产业的所有产品。这就是我们要在第二部里讨论的。</p>

<p>等等，最后说一句。随著乐队获得空前的成功，齐柏林飞船也从抄别人，变成被人抄。一开始是被70年代的乐团抄，如史密斯飞船、Heart 和 Boston，然后是80年代的重金属狂热时期，一路来到采样的时代。</p>

<p>齐柏林飞船 When the Levee Breaks 里的节拍，被他人多次采样并 remix。而齐柏林的回应是——<strong>他们没有因此起诉任何人</strong>。</p>

<h2>第二部：混搭公司</h2>

<p>或许是因为拍电影太烧钱，或许因为漫画、电视、游戏还有小说等等有着如此丰富的素材来源，又或许仅仅因为观众偏好熟悉的事物，不管理由为何，大多数票房大卖的影片非常依赖既有的素材。</p>

<p>对近十年来年度前十票房的影片做个统计，100 部里有 74 部要么是续集或重拍，要么是改编自漫画，游戏，小说等等。旧酒装新瓶可是好莱坞的拿手好戏。</p>

<p>当今我们有某影片的三部续集，而该影片创意来源于主题乐园里的游乐设施；我们有一部改编自音乐剧的歌舞片，而原本的音乐剧则改编自另一部影片；我们有部电影已经拍了两部续集，而第一部是根据TV动画改编，动画又是根据一个玩具系列制作的；我们有部电影源于两本书，其中一本小说源自一个博客，而这个博客灵感来源于另一本书，这本书又被改编进了该片之中。</p>

<p>你跟得上吗？</p>

<p>我们有11部星际迷航，12部13号星期五，23部 007。我们的故事一再被讲述、复述、改造、引用、颠覆，自电影发明以来一直如此。</p>

<p>我们看过的吸血鬼从丑陋的怪物，变成披斗篷的夜袭男，变成荒谬滑稽的笑料（campy jokes），变成性感美男，再变成更性感的美男子。</p>

<h3>类型影片</h3>

<p>至于那些不是续集或改编但同样卖座的影片，我也不太想用“原创”这个词来形容它们。这些是类型影片，它们依据非常标准化的模版制作而成。电影类型可以再分成有着更具体模式的子类型。在恐怖电影这个分类里，我们有这些子类型：杀人狂片，僵尸片，怪兽片，当然，还有血浆片。所有这些都是将标准元素挪用、转化或是颠覆。</p>

<p>我们以数十年来最成功的影片《阿凡达》为例。它不是续集、重拍或改编，但它是一部类型电影，一部科幻类型电影，最为突出的是，它属于“有同情心的白人对自身的杀戮、掠夺与灭绝行径感到愧疚”这样一个小小的子类型之中。我称这个子类型为“对殖民主义愧疚”片——同样还有《与狼共舞》、《最后的武士》、《最后一个莫西干人》、《沙丘》、《阿拉伯的劳伦斯》、《太阳盟》，甚至《芬格林》和《风中奇缘》。</p>

<p>电影从其他电影或者书、电视、真实事件等处汲取灵感，从类型电影到独立电影都是如此，即便是重塑了流行文化、拥有时代影响力的大片也不例外。例如，<strong>星球大战</strong>。</p>

<h3>乔治·鲁卡斯与《星球大战》</h3>

<p>即使放到现在，《星球大战》依然是极富想象力的作品。但它的许多元素如 remix 中的采样一般清晰可辨：</p>

<p>星战的根基来自于约瑟夫·坎贝尔，他在《千面英雄》一书中普及了神话体系。星战的大纲使用的就是该书中的“单一神话”模式。这个模式包含了很多阶段，如历险的召唤、超自然的助力、鲸鱼之腹、试炼之路、与女神相会等等，还有很多。
<em>注：Monomyth（单一神话），指神话中英雄冒险故事具有相似的圆环结构。最基本的三部分为“启程—启蒙—回归”。</em></p>

<p>星战受到另一个重大影响是 30 年代的《飞侠哥顿》系列和日本导演黑泽明。《星球大战》很像《飞侠哥顿》的升级版，连过场效果和开头字幕都一样；而从黑泽明的影片中，我们看到了许多同样的元素，如武士道精神、低级的打闹、过场效果、地板下的藏身处、坏蛋手臂被斩断，等等。</p>

<p>战争片和西部片同样是星战的重要素材来源，卢克发现他家被血洗后的场景，与《搜索者》里一样；汉·索罗拔枪射死赏金猎人格里多的一幕，则跟《黄昏三镖客》里一样。星战中攻击死星的场景，则来自于《轰炸鲁尔水坝记》中的轰炸场面、《633 轰炸大队》和《独孤里桥之役》，很多镜头甚至直接被用来当作特效样板。</p>

<p>还有很多明显是从其他电影中提取的元素：</p>

<ul>
<li>有个机器人类似《大都会》中的机器女人；</li>
<li>一些受《2001 太空漫游》启发的镜头；</li>
<li>抱着妹子荡秋千的场景像是《辛巴达七航妖岛》；</li>
<li>全息投影一幕和《原子铁金刚 》中类似；</li>
<li>阅兵场景仿效了《意志的胜利》；</li>
<li>可爱的小机器人很像《宇宙静悄悄》里的……</li>
</ul>


<p>乔治·鲁卡斯收集了这些素材，并将它们组合、转化。没有这些影片在先，就不会有《星球大战》。创造需要先被影响。我们创造的一切，都是既有创造物、我们的生活以及其他人的生活的 remix。</p>

<p>正如牛顿所言 : “我们站在巨人的肩上。”他这么说其实就是在实践这一道理，因为这句话是从柏纳德那里改编过来的。
<em>注：法国哲学家伯纳德的说法是，“我们都像坐在巨人肩膀上的矮子。”</em></p>

<p>在第三部里，我们将深入讨论这个概念，并在原创与非原创之间画下模糊的界线。</p>

<h3>昆汀·塔伦蒂诺与《杀死比尔》</h3>

<p>最后一件事，乔治·鲁卡斯是他那个时代最会借用他人影片的人，后来接力棒传给了——<strong>昆汀·塔伦蒂诺</strong>。</p>

<p>昆汀·塔伦蒂诺的大师级 remix 作品是《杀死比尔》，大概也是好莱坞最经典的混搭影片。</p>

<p>将大量影片素材打包搬到自己的影片，《杀死比尔》将电影采样手法提升到复杂的新境界。</p>

<p>护士杀手那幕几乎完全由其他电影重组而来。基本框架和《黑色星期天》里一样，都是一位女人乔装成护士，企图通过注射红色液体来谋杀病人。黛瑞·汉娜的眼罩参考了《独眼女枪手》里的女主角，而她吹的口哨旋律来自1968年的惊悚片《魔鬼天使》。屏幕切分手法是向布莱恩·德·帕尔玛致敬，帕尔玛在很多片中用到了这种手法，比如《魔女嘉丽》。</p>

<p>想要知道《杀死比尔》还参考了哪些影片？请查看以下视频。</p>

<div><object id="ssss" width="640" height="480" ><param name="allowScriptAccess" value="always" /><embed pluginspage="http://www.macromedia.com/go/getflashplayer" src="http://you.video.sina.com.cn/api/sinawebApi/outplayrefer.php/vid=74755807_1628893803_bhq1TyU7Bm7K+l1lHz2stqlF+6xCpv2xhGuyuVqsLA1RVQ+YJMXNb9oD5yzTCM9F5yoUEJU4cfkj0hUtbw/s.swf" type="application/x-shockwave-flash" name="ssss" allowFullScreen="true" allowScriptAccess="always" width="640" height="480"></embed></object></div>


<h2>第三部：创造之元</h2>

<p>创造领域被一层迷思所笼罩。比如说<em>“创造来自灵感”</em>，或是<em>“原创就是打破常规”</em>，或是<em>“创造是天才的专属，迸发于电光火石之间”</em>。</p>

<p>但创造力绝不是魔法。当日常思考被应用于既有素材中，创造力就会诞生。而我们孕育创造力的温床，却常常被我们轻视和误解，即使它给予我们许多养分——它就是<strong>复制</strong>。</p>

<h3>复制</h3>

<p>简单来说，我们靠复制来学习。直到熟练掌握自己的领域之前，我们没办法创造新的东西。而这个过程通过复制来完成。</p>

<p>比方说，所有艺术家都靠模仿前人来渡过成长期：</p>

<ul>
<li>鲍勃·迪伦的首张专辑里有 11 首翻唱歌曲；</li>
<li>理查德·普赖尔刚开始表演单口喜剧时靠的是对比尔·科斯比的拙劣模仿；</li>
<li>亨特·S·汤普森将《了不起的盖茨比》这本小说手打了一遍，只为了体验写一部伟大小说的感受……</li>
</ul>


<p>没人能一开始就无中生有，我们靠着复制来建立知识和理解的根基。然后……事情才变得有趣。</p>

<h3>转化</h3>

<p>我们靠“复制”来打下根基之后，然后才有可能靠“转化”来创造新东西——得到个想法，创造出变体。其间修修补补会花掉很多时间，不过最终你将得到突破。</p>

<ul>
<li>詹姆斯·瓦特极大推动了蒸汽机的发展，是因为他被派去维修一台纽科门蒸气机，然后他花了12年来发展自己的版本；</li>
<li>克里斯托夫·拉森·授斯仿造钢琴制作了他的打字机模型。这个设计在5年里逐渐演化，成为我们现今仍在使用的 QWERTY 键盘布局；</li>
<li>托马斯·爱迪生并没有发明灯泡。他的第一个专利是“电灯的改进”，但他的确生产了第一个商用灯泡，而该灯泡尝试了 6000 种不同的灯丝材质……</li>
</ul>


<p>这些都是重大的突破，但它们都不是原创的点子，而是不断在前人的发明基础上积累，直到到达临界点。</p>

<h3>结合</h3>

<p>在创意融会贯通之时，最戏剧化的结果就出现了。只有这样通过联结各种创意，才会产生创造性的飞跃，创造出历史上的重大突破。</p>

<ul>
<li>约翰内斯·谷登堡的印刷术于1440年左右发明，但它的所有组件其实早在数个世纪前被发明；</li>
<li>福特汽车公司并没有发明流水线模式、可替换的零件或者汽车本身。不过1908年福特公司将这些要素整合起来，生产了第一部量产型汽车“T型车”；</li>
<li>因特网经历了几十年的缓慢成长，才将网络与传送协议慢慢整合。直到1991年蒂姆·伯纳斯·李提出“万维网”，终于到达了临界点……</li>
</ul>


<p>这些是创造力的基本元素：<strong>复制</strong>，<strong>转化</strong>，<strong>结合</strong>。</p>

<p>我们现今所使用的设备背后的故事，就是这一观点的绝佳证明。让我们回到个人电脑诞生之初，看看这一切的开始——施乐（Xerox）。</p>

<h3>施乐与苹果</h3>

<p>施乐在70年代早期发明了现代个人电脑。Alto 的操作系统使用鼠标驱动的图形用户界面技术。别忘了，当时流行的个人电脑是用开关操作的。如果拨动开关的顺序正确，你就会看到灯闪。Alto 的技术远遥遥领先于时代。</p>

<p>苹果公司弄到一堆 Alto 电脑后，研究发布了两款使用图形界面的电脑：Lisa 以及随后更成功的 Macintosh。</p>

<p>Alto 却从未商品化。但施乐确实曾于 1981 年推出一款基于 Alto 的系统：the Star 8010，比 Lisa 早两年，比 Mac 早3年。正是 Star 8010 和 Alto 为 Macintosh 打下了基础。</p>

<p>施乐的 Star 系统将显示器比拟成用户的桌面，上面可以放置文档与文件夹的图标，有带指针的滚动条和弹出菜单。这些都是伟大的创新，而 Mac 抄来了每一样东西。但是 Mac 是第一个整合这些功能的，从而获得了长期的成功。</p>

<p>苹果的目标是将家用电器和电脑整合起来，所以 Mac 设计得像是电视或是音响那样简单，这和面向专业人士的 Star 不同，与当时主流的复杂命令行系统更是天差地别。Mac 是设计给家用的，因此做了一系列改变：</p>

<ul>
<li>首先，苹果去掉了鼠标上的一个按键，以避免混淆，然后增加双击功能来打开文件；Star 则是使用另一个按键来打开文件。</li>
<li>Mac 允许你拖曳图标，移动窗口或改变窗口大小；Star 没有拖拽功能，要移动或复制文件，你得先选取图标，选择按键，然后点击目的地，你也只能使用菜单来改变窗口大小。</li>
<li>Star 与 Alto 有弹出菜单，但这些菜单在窗口中的位置是移动的，用户必须一直重新定位；Mac 引入了顶部菜单，不管你做什么，它的位置是不变的。</li>
<li>Mac 也增加了回收站，让删除文件更直观也不再伤脑筋……</li>
</ul>


<p>最终，通过功能取舍和巧妙的工程设计，苹果设法将 Mac 的售价减少到 2500 美元。依然很贵，但和 1 万美元的 Lisa 或 1 万 7 千美元 的 Star 相比就便宜多了。</p>

<p>这一切都始于图形界面与电脑家电化概念的结合，Mac 展示了<strong>结合</strong>所具有的爆炸性潜力。另一方面，Star 和 Alto 是多年来精英研究和发展的成果，证明了<strong>转化</strong>具有潺潺不断的动力。当然，它们也吸收了前人的成果，Alto 和 Star 都是NLS系统进化过程中的分支，而正是 NLS 引入了窗口和鼠标的概念。再追溯到 Sketchpad ——第一个交互式绘图软件，甚至到 Memex ——该设想在个人电脑诞生几十年前就出现了，个人电脑就是仿效的 Memex 设计。</p>

<p>强势的文化观掩盖了创造力相互依存的事实，而现在科技揭露了创意的连通性。为了应对这些难题，我们在法律、道德和艺术之间的纠缠中挣扎，这就是我们最终将在第四部里探讨的。</p>

<h3>多重发现</h3>

<p>如果施乐没有发展图形界面，如果托马斯·爱迪生从事了别的行业，如果蒂姆·伯纳斯·李没拿到万维网项目的研究经费，我们的世界会有所不同吗？我们会远远落后吗？</p>

<p>历史告诉我们，结果或许不会相去太远。不管有什么重大突破，总有其他人走在同样的道路上，也许落后一点点，也许一点儿也不会落后。</p>

<ul>
<li>艾萨克·牛顿与戈特弗里德·莱布尼兹，两人都在 1684 年左右创立微积分；</li>
<li>查尔斯·罗伯特·达尔文提出基于自然选择的进化论，而阿尔弗雷德·拉塞尔·华莱士几乎在同时，抱有几乎一样的观点；</li>
<li>亚历山大·格拉汉姆·贝尔和伊莱沙·格雷在同一天申请电话的专利……</li>
</ul>


<p>我们管这种现象叫<strong>多重发现</strong>——同一发明从不同的地方涌现。在科学和发明界，这种例子层出不穷，同样艺术界也常常发生。</p>

<p>以电影界为例，9 个月内会有 3 部可可·香奈儿的传记片上映，1999 年前后有四部虚拟现实题材的科幻电影，甚至查理·考夫曼那部不同寻常的原创电影《纽约浮世绘》，也跟汤姆·麦卡锡的小说 Remainder 离奇的相似。两个故事都是讲一个突然致富的人，然后开始重现他们曾经生活中的重要时刻，甚至最终还重现了这些重现的过程。</p>

<p>实际上，你现在正在看的这个视频，刚好是在《纽约客》刊登麦尔坎·葛拉威尔的故事之前完成。那篇文章同样在探讨苹果、施乐以及创新的本质。</p>

<p>我们都是用相同的素材来搭建，有时就会恰巧得到相似的结果，而有时，创新就不可避免的产生了。</p>

<blockquote><p>“我并没有发明什么新东西。我仅仅是把别人发明的东西组装起来，而那些发明者背后也都经历了数个世纪的研究。要是我早五十年、十年、甚至五年来做这个事，我都会失败。所以说，它依靠的是每一样新事物。只有在所有客观因素齐备的情况下，我们才会取得进步。这是不因个人意志而改变的。那些教育人们历史进步是由极个别人带来的说法，简直是无稽之谈。” —— 亨利·福特</p></blockquote>

<h2>第四部：系统失灵</h2>

<h3>基因和模因</h3>

<p>我们身体里的基因，可以追溯到三十五亿年前的一个生命体：LUCA，<strong>最后的共同祖先</strong>（the Last Universal Common Ancestor）
_注：LUCA是一个定义在逻辑上的生物，是现存所有生物的共同祖先。该术语来自于生命起源的问题中，使用反演法提出的假说。</p>

<p>当 LUCA 繁衍的时候，它的基因一直不断地被<strong>复制</strong>，偶尔会出现差错，于是得到<strong>转化</strong>。久而久之便演变成今日地球上数十亿种的生物类型。其中有些物种进行有性生殖，<strong>结合</strong>了不同个体的基因。总而言之，适者生存。这就是进化的过程，<strong>复制</strong>、<strong>转化</strong>、<strong>结合</strong>。</p>

<p>文化也以类似的方式演变，不过单位不再是基因，而是模因（meme），也就是<strong>想法</strong>、<strong>行为</strong>和<strong>技巧</strong>。模因同样可以被<strong>复制</strong>、<strong>转化</strong>和<strong>结合</strong>。</p>

<p>注：模因（meme），亦称文化基因。出自理查·道金斯《自私的基因》一书。表示文化资讯传承时的单位，存在于个体的思想中，会进行自我繁衍从而在不同人的思想领域内传播。</p>

<p>能够广泛传播的模因会形成当代的主流观念，这就是社会的演化——<strong>复制</strong>、<strong>转化</strong>、<strong>结合</strong>。这是我们存在的理由、生活的方式，也是创造的起源。</p>

<p>我们的新观念从旧的演化而来。但是我们的法律系统并不认可这样的模式，不承认创意的衍生性质，而是将想法与概念视为财产——独一无二的、且具有鲜明界限的领地。</p>

<p>但是创意可没有那么简单。它们相互重叠，它们彼此交织，它们混杂交错。当制度和现实起了冲突……系统就开始失灵。</p>

<h3>知识产权与公有领域</h3>

<p>综观人类整个历史，想法与概念都是免费的。莎士比亚、古豋堡或是伦布兰特的创作，都可以公开地被复制，并在此基础上发展出更多东西。不过市场经济慢慢主导一切后，我们脑袋创造出来的东西开始被购买或是贩售。这产生一个不幸的副作用。</p>

<p>假设今天一位仁兄发明了一颗更好的灯泡。这个价钱需要涵盖的不光只有单纯制造成本，还要包括发明的费用——这一开始就会产生的开销。今天要是有一个竞争者也开始制造这样的灯泡，该竞争商品的价格不需要包括发明的成本，所以他可以以较低价格贩售。</p>

<p>于是，重点在于：<strong>原创商品无法跟复制品的价格竞争</strong>。</p>

<p>在美国，版权与专利权的引入就是为了弥补这个不平衡。版权涵盖了媒体商品，专利权涵盖了独特发明。两者目的都在借由提供暂时且有限的独有权，让别人无法复制你的创作，借此鼓励想法与概念的创新与传播。这个方式让创新者有一段专有获利的时间，以便弥补发明的投资并获得利润。过了这个独占时间后，他们的创作就进入<strong>公有领域</strong>，以便可以传播得更远更广，同时也可以让别人在此基础上发展更多东西。</p>

<p>而这就是原本知识产权的目标：建立一个强健的公有领域，让每个人都可以使用这些想法、产品、艺术与娱乐。这一概念的核心价值在于为大众着想，希望能使所有人受益。不过随着时间过去，市场经济的影响让这个初衷面目全非。有影响力的人鼓吹<em>“想法也是一种财产”</em>，而这个信念最终产生一个新名词：<strong>知识产权</strong>。</p>

<h3>损失厌恶理论</h3>

<p>这是一个被广泛散布的<strong>模因</strong>。一部份要归咎于人类的心理，也就是大家熟知的<strong>损失厌恶（Loss Aversion）</strong>理论。简单地说，就是我们讨厌损失拥有的东西，与<strong>获取物</strong>相比，人们通常比较看重<strong>损失物</strong>的价值。</p>

<p>所以，我们从复制或是其他人的创作获得的东西。总是不会产生很深刻的印象。不过要是我们的想法被复制，我们就会感觉到损失，然后开始产生领域性。</p>

<p>比方说，迪士尼大量地从公有领域获取想法与概念，如白雪公主、匹诺曹、艾莉丝梦游仙境的故事，都是从公有领域获取而来。不过那些迪士尼早期即将过版权保护年限的影片，他们却花大钱游说要延长版权年限不让自己的创作释出。</p>

<p>涂鸦艺术师 Shepard Fairey 大量地在自己作品中使用既有创作当作素材，这个做法受到了美联社的控告。因为他在有名的 Obama Hope 海报中，使用了美联社拍摄的奥巴马照片。尽管如此，当他的海报被 Baxter Orr 使用时，他却威胁要控告 Baxter Orr。</p>

<p>另外像是乔布斯，他曾经对苹果电脑复制别人发明的这段历史沾沾自喜：<em>“对于窃取别人的好创意这点，我们从不感到羞愧。”</em>但他内心其实对胆敢窃取苹果的人却深怀恨意：<em>“我要毁灭安卓系统，因为它是偷来的。为此我不惜发动核战。”</em></p>

<p><strong>当我们复制别人，我们给自己找理由；当别人复制我们，我们则丑化别人。</strong>我们大部份的人都觉得复制没有什么问题，只因为我们也一直这么做。</p>

<p>由于我们自身对自己模仿的天性漠视，然后又被市场与拥有权这些概念鼓吹之下，知识产权这个概念便无限上纲，甚至超过一开始设计的范畴，变成利用既有法条却涵盖更广的知识产权诠释、新的立法、新的涵盖范围以及更诱人的奖赏来处罚。</p>

<p>1981 年英国歌手乔治·哈里森因为<strong>潜意识地</strong>在他民谣歌曲 My Sweet Lord 中抄袭 doo-wop 热门歌曲 He&#8217;s so Fine，而输掉了 150 万美元的官司。在这个案例之前，一堆歌其实听起来都很接近，也没有闹到要上法院。雷·查尔斯在 I Got a Woman 这首歌中创造了早期灵魂乐的雏形，而这首歌是根据福音歌曲 It Must be Jesus 而来。</p>

<p>90年代晚期一连串新的版权法条以及规则开始被引进，而且更多还在酝酿当中，其中最骇人的是贸易协定。因为这些是条约，而非法律，他们可以秘密地制定这些内容，完全不管大众意见或是国会同意。2011 年时奥巴马签署的ACTA（反仿冒贸易协定），以及目前正在谈判的<strong>跨太平洋战略经济伙伴关系协定</strong>，目的是向全世界散布一个更强悍的<strong>美式知识产权保护机制</strong>。</p>

<p>当然当美国经济还在发展的时候，它是不会签署这类的协定的，而且对外国人的创作也不会有任何保护。查尔斯·狄更斯曾严重抱怨过美国猖獗的盗版书市场，称其为<em>“恶棍书商致富的地方”</em>。</p>

<p>专利权涵盖范围从实体商品延伸到无形的物件，最出名的应该是<strong>软件</strong>，不过这不是一个自然的转变。专利是如何发明一样东西的蓝图；软件专利则是含糊地说明一样东西是什么，假设它真的被发明出来的话。而且软件专利用广得不能再广的语言方式写下来，以便得到广得不能再广的保护。他们那些含糊不清的用词有时到了荒谬的程度。举例来说，“信息制造机”，基本上包含所有长得像电脑的东西；或是“物质实体”，基本上包含所有东西。</p>

<p>软件专利界限的模糊，让智能手机界变成一个巨大而混乱的地盘抢夺战。62% 的专利权诉讼都跟软件有关，这些诉讼造成的损失估计达半兆美元之多。</p>

<h3>样本鬼和专利鬼</h3>

<p>因为知识产权的无限上纲，许多机会主义者找到了更多机会——借诉讼赚钱。两种专靠诉讼赚钱的新工作因此诞生：<strong>样本鬼</strong>，和<strong>专利鬼</strong>。这些公司基本上都不实际生产什么有益的东西，他们买下一堆专利，然后靠着告别人来发财。而且因为这些跟版权有关的官司都牵扯上一大堆钱，跟专利有关的则都是百万美金计，所以他们的目标通常都会希望在庭外和解。</p>

<p>最有名的样本鬼就是 Bridgeport Music 音乐公司，他们提告的官司超过几百件。2005年他们在法庭上起诉 N.W.A 在 100 Miles and Runnin&#8217; 中使用了2秒的采样，获得胜利。仅仅就两2秒，不光采样很短，而且还很难辨识。这个判决基本上使得任何种类的取样，不管多小，都侵犯了著作权。Hip-hop黄金时代使用大量采样的音乐拼贴，而这种行为放到现在，就变得异常昂贵。</p>

<p>现在专利鬼在软件界随处可见，而最让人无法理解的是 Paul Allen 的案例。他是微软的创办人之一，是位亿万富翁，是位受人尊敬的慈善家，发誓要将大部份的财产捐献出来；而他宣称一些基本的网络功能像是相关链接、警告以及建议等等，是由他早已废弃的公司所发明。所以这位自称“点子王”的人，在 2010 年时几乎控告了所有硅谷的公司。尽管他不缺钱也不缺名声，他还是这么干了。</p>

<p>所以整理一下，整件事是这样的。我们相信想法是财产的一种。当我们感觉这个财产是我们的时候，我们开始产生极端的领域意识。我们的法律纵容我们这个偏执的想法，以漫无边界的保护机制和奖赏来鼓励这个机制，同时巨额的法律支出鼓励被告花钱消灾、在庭外和解，这实在是个让人沮丧的状况。</p>

<p>这引出了一个问题：<strong>我们现在该怎么办？</strong></p>

<h3>What now?</h3>

<p>对知识产权的信仰变地如此强势，以致于它将版权以及专利权原本的目的推出公众意识之外。但起初的目的仍然就近在眼前。</p>

<p>1790 年版权法的标题上写着<em>“一个鼓励学习的法案”</em>，而专利法案的标题是<em>“鼓励有用技术的发展”</em>。这些法案提供的专属权力，是为了一个更好的目标而不得不作的妥协，目的在让所有人的生活更好，借着提供创新的诱因，并且建立一个富饶的公共领域，一个开放给大众分享的知识之泉。</p>

<p>但专属权却演变成自身被认为才是重点，而被更强调、更扩张，导致的结果，不是更进步或是更多学习，而是更多争论与滥用。我们身处在这个巨大问题的时代，我们需要最好的创意和想法，我们需要它们尽快传播。</p>

<p><strong>公共利益</strong>这个模因被知识产权所压倒，它需要被重新传播开来。假如这个模因获得成功，我们的法律，规范与社会，他们都会<strong>转化</strong>。这就是<strong>社会进化</strong>。</p>

<p>而这责任不在政府身上，也不在企业或是律师身上。</p>

<p><strong>责任在于我们自己。</strong></p>

<h2>后记</h2>

<p>前三部分由于没有官方翻译，而 Amara 上的繁体版字幕无论是时间轴还是翻译质量都不尽如人意，于是我重新翻译了。第四部分有官方繁体字幕，我在此基础上进行了一些修订，修改了一些错误，部分外来词汇改为大陆的习惯用语，以及统一了整个系列的说法。时间仓促加上水平有限，如有遗漏请见谅。</p>

<p>你可以随意传播我翻译/压制的视频，也请随意分享此文章。我并不拥有它们。当然，前提是你不声称这是你自己的作品。</p>

<h2>相关链接及拓展阅读</h2>

<p>作者 Kirby Ferguson@vimeo：<a href="http://vimeo.com/kirbyferguson">http://vimeo.com/kirbyferguson</a>
影片官网：<a href="http://EverythingisaRemix.info">http://EverythingisaRemix.info</a>
Everything is a Remix:the Matrix：<a href="http://video.sina.com.cn/v/b/74758503-1628893803.html">http://video.sina.com.cn/v/b/74758503-1628893803.html</a>
Everything is a Remix:Kill Bill:<a href="http://video.sina.com.cn/v/b/74755807-1628893803.html">http://video.sina.com.cn/v/b/74755807-1628893803.html</a>
模因（meme）学的概念：<a href="http://zh.wikipedia.org/zh-cn/%E6%A8%A1%E5%9B%A0">http://zh.wikipedia.org/zh-cn/%E6%A8%A1%E5%9B%A0</a>
Creative Common:<a href="http://zh.wikipedia.org/wiki/%E5%88%9B%E4%BD%9C%E5%85%B1%E7%94%A8">http://zh.wikipedia.org/wiki/%E5%88%9B%E4%BD%9C%E5%85%B1%E7%94%A8</a>
《采样，嘻哈与法律》：<a href="http://site.douban.com/dryfish/widget/notes/3141885/note/155784863/">http://site.douban.com/dryfish/widget/notes/3141885/note/155784863/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://Magnil.github.com/blog/2013/03/29/hello-world/"/>
    <updated>2013-03-29T00:56:00+08:00</updated>
    <id>http://Magnil.github.com/blog/2013/03/29/hello-world</id>
    <content type="html"><![CDATA[<p>Hello World!</p>

<p>This is my first blog. 点击阅读更多。</p>

<!-- more -->


<p>以下使用<a href="http://beiyuu.com" title="BeiYuu">Beiyuu</a>的博文进行测试：</p>

<p><a href="http://github.com" title="Github">Github</a>很好的将代码和社区联系在了一起，于是发生了很多有趣的事情，世界也因为他美好了一点点。Github作为现在最流行的代码仓库，已经得到很多大公司和项目的青睐，比如<a href="https://github.com/jquery/jquery" title="jQuery@github">jQuery</a>、<a href="https://github.com/twitter/bootstrap" title="Twitter@github">Twitter</a>等。为使项目更方便的被人理解，介绍页面少不了，甚至会需要完整的文档站，Github替你想到了这一点，他提供了<a href="http://pages.github.com/" title="Github Pages">Github Pages</a>的服务，不仅可以方便的为项目建立介绍站点，也可以用来建立个人博客。</p>

<p>Github Pages有以下几个优点：</p>

<ul>
    <li>轻量级的博客系统，没有麻烦的配置</li>
    <li>使用标记语言，比如<a href="http://markdown.tw">Markdown</a></li>
    <li>无需自己搭建服务器</li>
    <li>根据Github的限制，对应的每个站有300MB空间</li>
    <li>可以绑定自己的域名</li>
</ul>


<p>当然他也有缺点：</p>

<ul>
<li>使用<a href="https://github.com/mojombo/jekyll" title="Jekyll">Jekyll</a>模板系统，相当于静态页发布，适合博客，文档介绍等。</li>
<li>动态程序的部分相当局限，比如没有评论，不过还好我们有解决方案。</li>
<li>基于Git，很多东西需要动手，不像Wordpress有强大的后台</li>
</ul>


<p>大致介绍到此，作为个人博客来说，简洁清爽的表达自己的工作、心得，就已达目标，所以Github Pages是我认为此需求最完美的解决方案了。</p>

<h2>购买、绑定独立域名</h2>

<p>虽说<a href="http://www.godaddy.com/" title="Godaddy">Godaddy</a>曾支持过SOPA，并且首页放着极其不专业的大胸美女，但是作为域名服务商他做的还不赖，选择它最重要的原因是他支持支付宝，没有信用卡有时真的很难过。</p>

<p>域名的购买不用多讲，注册、选域名、支付，有网购经验的都毫无压力，优惠码也遍地皆是。域名的配置需要提醒一下，因为伟大英明的GFW的存在，我们必须多做些事情。</p>

<p>流传Godaddy的域名解析服务器被墙掉，导致域名无法访问，后来这个事情在<a href="http://beiyuu.com" title="BeiYuu">BeiYuu</a>也发生了，不得已需要把域名解析服务迁移到国内比较稳定的服务商处，这个迁移对于域名来说没有什么风险，最终的控制权还是在Godaddy那里，你随时都可以改回去。</p>

<p>我们选择<a href="https://www.dnspod.cn/" title="DNSPod">DNSPod</a>的服务，他们的产品做得不错，易用、免费，收费版有更高端的功能，暂不需要。注册登录之后，按照DNSPod的说法，只需三步（我们插入一步）：</p>

<ul>
    <li>首先添加域名记录，可参考DNSPod的帮助文档：<a href="https://www.dnspod.cn/Support">https://www.dnspod.cn/Support</a></li>
    <li>在DNSPod自己的域名下添加一条<a href="http://baike.baidu.com/view/65575.htm">A记录</a>，地址就是Github Pages的服务IP地址：207.97.227.245</li>
    <li>在域名注册商处修改DNS服务:去Godaddy修改Nameservers为这两个地址：f1g1ns1.dnspod.net、f1g1ns2.dnspod.net。如果你不明白在哪里修改，可以参考这里：<a href="https://www.dnspod.cn/support/index/fid/119">Godaddy注册的域名如何使用DNSPod</a></li>
    <li>等待域名解析生效</li>
</ul>


<p>域名的配置部分完成，跪谢方校长。</p>

<h2>配置和使用Github</h2>

<p>Git是版本管理的未来，他的优点我不再赘述，相关资料很多。推荐这本<a href="http://progit.org/book/zh/" title="Pro Git中文版">Git中文教程</a>。</p>

<p>要使用Git，需要安装它的客户端，推荐在Linux下使用Git，会比较方便。Windows版的下载地址在这里：<a href="http://code.google.com/p/msysgit/downloads/list" title="Windows版Git客户端">http://code.google.com/p/msysgit/downloads/list</a>。其他系统的安装也可以参考官方的<a href="http://help.github.com/mac-set-up-git/" title="Mac下Git安装">安装教程</a>。</p>

<p>下载安装客户端之后，各个系统的配置就类似了，我们使用windows作为例子，Linux和Mac与此类似。</p>

<p>在Windows下，打开Git Bash，其他系统下面则打开终端（Terminal）：
<img src="http://Magnil.github.com/images/githubpages/bootcamp_1_win_gitbash.jpg" alt="Git Bash" /></p>

<h3>1、检查SSH keys的设置</h3>

<p>首先我们需要检查你电脑上现有的ssh key：</p>

<pre><code>$ cd ~/.ssh
</code></pre>

<p>如果显示“No such file or directory”，跳到第三步，否则继续。</p>

<h3>2、备份和移除原来的ssh key设置：</h3>

<p>因为已经存在key文件，所以需要备份旧的数据并删除：</p>

<pre><code>$ ls
config  id_rsa  id_rsa.pub  known_hosts
$ mkdir key_backup
$ cp id_rsa* key_backup
$ rm id_rsa*
</code></pre>

<h3>3、生成新的SSH Key：</h3>

<p>输入下面的代码，就可以生成新的key文件，我们只需要默认设置就好，所以当需要输入文件名的时候，回车就好。</p>

<pre><code>$ ssh-keygen -t rsa -C "邮件地址@youremail.com"
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;
</code></pre>

<p>然后系统会要你输入加密串（<a href="http://help.github.com/ssh-key-passphrases/">Passphrase</a>）：</p>

<pre><code>Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;
Enter same passphrase again:&lt;再次输入加密串&gt;
</code></pre>

<p>最后看到这样的界面，就成功设置ssh key了：
<img src="http://Magnil.github.com/images/githubpages/ssh-key-set.png" alt="ssh key success" /></p>

<h3>4、添加SSH Key到GitHub：</h3>

<p>在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。</p>

<p>用文本编辑工具打开id_rsa.pub文件，如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。</p>

<p>在GitHub的主页上点击设置按钮：
<img src="http://Magnil.github.com/images/githubpages/github-account-setting.png" alt="github account setting" /></p>

<p>选择SSH Keys项，把复制的内容粘贴进去，然后点击Add Key按钮即可：
<img src="http://Magnil.github.com/images/githubpages/bootcamp_1_ssh.jpg" alt="set ssh keys" /></p>

<p>PS：如果需要配置多个GitHub账号，可以参看这个<a href="http://omiga.org/blog/archives/2269">多个github帐号的SSH key切换</a>，不过需要提醒一下的是，如果你只是通过这篇文章中所述配置了Host，那么你多个账号下面的提交用户会是一个人，所以需要通过命令<code>git config --global --unset user.email</code>删除用户账户设置，在每一个repo下面使用<code>git config --local user.email '你的github邮箱@mail.com'</code> 命令单独设置用户账户信息</p>

<h3>5、测试一下</h3>

<p>可以输入下面的命令，看看设置是否成功，<code>git@github.com</code>的部分不要修改：</p>

<pre><code>$ ssh -T git@github.com
</code></pre>

<p>如果是下面的反应：</p>

<pre><code>The authenticity of host 'github.com (207.97.227.239)' can't be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)?
</code></pre>

<p>不要紧张，输入<code>yes</code>就好，然后会看到：</p>

<pre><code>Hi &lt;em&gt;username&lt;/em&gt;! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre>

<h3>6、设置你的账号信息</h3>

<p>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。</p>

<p>Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。</p>

<pre><code>$ git config --global user.name "你的名字"
$ git config --global user.email "your_email@youremail.com"
</code></pre>

<h4>设置GitHub的token</h4>

<p>2012-4-28补充：新版的接口已经不需要配置token了，所以下面这段可以跳过了</p>

<p>有些工具没有通过SSH来链接GitHub。如果要使用这类工具，你需要找到然后设置你的API Token。</p>

<p>在GitHub上，你可以点击<em>Account Setting > Account Admin</em>：
<img src="http://Magnil.github.com/images/githubpages/bootcamp_1_token.jpg" alt="set ssh keys" /></p>

<p>然后在你的命令行中，输入下面的命令，把token添加进去：</p>

<pre><code>$ git config --global user.name "你的名字"
$ git config --global user.token 0123456789your123456789token
</code></pre>

<p>如果你改了GitHub的密码，需要重新设置token。</p>

<h3>成功了</h3>

<p>好了，你已经可以成功连接GitHub了。</p>

<h2>使用GitHub Pages建立博客</h2>

<p>与GitHub建立好链接之后，就可以方便的使用它提供的Pages服务，GitHub Pages分两种，一种是你的GitHub用户名建立的<code>username.github.com</code>这样的用户&amp;组织页（站），另一种是依附项目的pages。</p>

<h3>User &amp; Organization Pages</h3>

<p>想建立个人博客是用的第一种，形如<code>beiyuu.github.com</code>这样的可访问的站，每个用户名下面只能建立一个，创建之后点击<code>Admin</code>进入项目管理，可以看到是这样的：
<img src="http://Magnil.github.com/images/githubpages/user-pages.png" alt="user pages" />
而普通的项目是这样的，即使你也是用的<code>othername.github.com</code>：
<img src="http://Magnil.github.com/images/githubpages/other-pages.png" alt="other pages" /></p>

<p>创建好<code>username.github.com</code>项目之后，提交一个<code>index.html</code>文件，然后<code>push</code>到GitHub的<code>master</code>分支（也就是普通意义上的主干）。第一次页面生效需要一些时间，大概10分钟左右。</p>

<p>生效之后，访问<code>username.github.com</code>就可以看到你上传的页面了，<a href="http://beiyuu.github.com">beiyuu.github.com</a>就是一个例子。</p>

<p>关于第二种项目<code>pages</code>，简单提一下，他和用户pages使用的后台程序是同一套，只不过它的目的是项目的帮助文档等跟项目绑定的内容，所以需要在项目的<code>gh-pages</code>分支上去提交相应的文件，GitHub会自动帮你生成项目pages。具体的使用帮助可以参考<a href="http://pages.github.com/" title="Github Pages">Github Pages</a>的官方文档：</p>

<h3>绑定域名</h3>

<p>我们在第一部分就提到了在DNS部分的设置，再来看在GitHub的配置，要想让<code>username.github.com</code>能通过你自己的域名来访问，需要在项目的根目录下新建一个名为<code>CNAME</code>的文件，文件内容形如：</p>

<pre><code>beiyuu.com
</code></pre>

<p>你也可以绑定在二级域名上：</p>

<pre><code>blog.beiyuu.com
</code></pre>

<p>需要提醒的一点是，如果你使用形如<code>beiyuu.com</code>这样的一级域名的话，需要在DNS处设置A记录到<code>207.97.227.245</code>（<strong>这个地址会有变动，<a href="https://help.github.com/articles/my-custom-domain-isn-t-working">这里</a>查看</strong>），而不是在DNS处设置为CNAME的形式，否则可能会对其他服务（比如email）造成影响。</p>

<p>设置成功后，根据DNS的情况，最长可能需要一天才能生效，耐心等待吧。</p>

<h2>Jekyll模板系统</h2>

<p>GitHub Pages为了提供对HTML内容的支持，选择了<a href="https://github.com/mojombo/jekyll" title="Jekyll">Jekyll</a>作为模板系统，Jekyll是一个强大的静态模板系统，作为个人博客使用，基本上可以满足要求，也能保持管理的方便，你可以查看<a href="https://github.com/mojombo/jekyll/blob/master/README.textile">Jekyll官方文档</a>。</p>

<p>你可以直接fork<a href="https://github.com/beiyuu/beiyuu.github.com">我的项目</a>，然后改名，就有了你自己的满足Jekyll要求的文档了，当然你也可以按照下面的介绍自己创建。</p>

<h3>Jekyll基本结构</h3>

<p>Jekyll的核心其实就是一个文本的转换引擎，用你最喜欢的标记语言写文档，可以是Markdown、Textile或者HTML等等，再通过<code>layout</code>将文档拼装起来，根据你设置的URL规则来展现，这些都是通过严格的配置文件来定义，最终的产出就是web页面。</p>

<p>基本的Jekyll结构如下：</p>

<pre><code>|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   `-- post.html
|-- _posts
|   |-- 2007-10-29-why-every-programmer-should-play-nethack.textile
|   `-- 2009-04-26-barcamp-boston-4-roundup.textile
|-- _site
`-- index.html
</code></pre>

<p>简单介绍一下他们的作用：</p>

<h4>_config.yml</h4>

<p>配置文件，用来定义你想要的效果，设置之后就不用关心了。</p>

<h4>_includes</h4>

<p>可以用来存放一些小的可复用的模块，方便通过<code>{ % include file.ext %}</code>（去掉前两个{中或者{与%中的空格，下同）灵活的调用。这条命令会调用_includes/file.ext文件。</p>

<h4>_layouts</h4>

<p>这是模板文件存放的位置。模板需要通过<a href="https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter">YAML front matter</a>来定义，后面会讲到，<code>{ { content }}</code>标记用来将数据插入到这些模板中来。</p>

<h4>_posts</h4>

<p>你的动态内容，一般来说就是你的博客正文存放的文件夹。他的命名有严格的规定，必须是<code>2012-02-22-artical-title.MARKUP</code>这样的形式，MARKUP是你所使用标记语言的文件后缀名，根据_config.yml中设定的链接规则，可以根据你的文件名灵活调整，文章的日期和标记语言后缀与文章的标题的独立的。</p>

<h4>_site</h4>

<p>这个是Jekyll生成的最终的文档，不用去关心。最好把他放在你的<code>.gitignore</code>文件中忽略它。</p>

<h4>其他文件夹</h4>

<p>你可以创建任何的文件夹，在根目录下面也可以创建任何文件，假设你创建了<code>project</code>文件夹，下面有一个<code>github-pages.md</code>的文件，那么你就可以通过<code>yoursite.com/project/github-pages</code>访问的到，如果你是使用一级域名的话。文件后缀可以是<code>.html</code>或者<code>markdown</code>或者<code>textile</code>。这里还有很多的例子：<a href="https://github.com/mojombo/jekyll/wiki/Sites">https://github.com/mojombo/jekyll/wiki/Sites</a></p>

<h3>Jekyll的配置</h3>

<p>Jekyll的配置写在_config.yml文件中，可配置项有很多，我们不去一一追究了，很多配置虽有用但是一般不需要去关心，<a href="https://github.com/mojombo/jekyll/wiki/configuration">官方配置文档</a>有很详细的说明，确实需要了可以去这里查，我们主要说两个比较重要的东西，一个是<code>Permalink</code>，还有就是自定义项。</p>

<p><code>Permalink</code>项用来定义你最终的文章链接是什么形式，他有下面几个变量：</p>

<ul>
<li><code>year</code> 文件名中的年份</li>
<li><code>month</code> 文件名中的月份</li>
<li><code>day</code> 文件名中的日期</li>
<li><code>title</code> 文件名中的文章标题</li>
<li><code>categories</code> 文章的分类，如果文章没有分类，会忽略</li>
<li><code>i-month</code> 文件名中的除去前缀0的月份</li>
<li><code>i-day</code> 文件名中的除去前缀0的日期</li>
</ul>


<p>看看最终的配置效果：</p>

<ul>
<li><code>permalink: pretty</code> /2009/04/29/slap-chop/index.html</li>
<li><code>permalink: /:month-:day-:year/:title.html</code> /04-29-2009/slap-chop.html</li>
<li><code>permalink: /blog/:year/:month/:day/:title</code> /blog/2009/04/29/slap-chop/index.html</li>
</ul>


<p>我使用的是：</p>

<ul>
<li><code>permalink: /:title</code> /github-pages</li>
</ul>


<p>自定义项的内容，例如我们定义了<code>title:BeiYuu的博客</code>这样一项，那么你就可以在文章中使用<code>{ { site.title }}</code>来引用这个变量了，非常方便定义些全局变量。</p>

<h3>YAML Front Matter和模板变量</h3>

<p>对于使用YAML定义格式的文章，Jekyll会特别对待，他的格式要求比较严格，必须是这样的形式：</p>

<pre><code>---
layout: post
title: Blogging Like a Hacker
---
</code></pre>

<p>前后的<code>---</code>不能省略，在这之间，你可以定一些你需要的变量，layout就是调用<code>_layouts</code>下面的某一个模板，他还有一些其他的变量可以使用：</p>

<ul>
<li><code>permalink</code> 你可以对某一篇文章使用通用设置之外的永久链接</li>
<li><code>published</code> 可以单独设置某一篇文章是否需要发布</li>
<li><code>category</code> 设置文章的分类</li>
<li><code>tags</code> 设置文章的tag</li>
</ul>


<p>上面的<code>title</code>就是自定义的内容，你也可以设置其他的内容，在文章中可以通过<code>{ { page.title }}</code>这样的形式调用。</p>

<p>模板变量，我们之前也涉及了不少了，还有其他需要的变量，可以参考官方的文档：<a href="https://github.com/mojombo/jekyll/wiki/template-data" title="Jekyll Template Data">https://github.com/mojombo/jekyll/wiki/template-data</a></p>

<h2>使用Disqus管理评论</h2>

<p>模板部分到此就算是配置完毕了，但是Jekyll只是个静态页面的发布系统，想做到关爽场倒是很容易，如果想要评论呢？也很简单。</p>

<p>现在专做评论模块的产品有很多，比如<a href="http://disqus.com/">Disqus</a>，还有国产的<a href="http://duoshuo.com/">多说</a>，Disqus对现在各种系统的支持都比较全面，到写博客为止，多说现在仅是WordPress的一个插件，所以我这里暂时也使用不了，多说与国内的社交网络紧密结合，还是有很多亮点的，值得期待一下。我先选择了Disqus。</p>

<p>注册账号什么的就不提了，Disqus支持很多的博客平台，参见下图：
<img src="http://Magnil.github.com/images/githubpages/disqus-site.jpg" alt="Disqus sites" /></p>

<p>我们选择最下面的<code>Universal Code</code>就好，然后会看到一个介绍页面，把下面这段代码复制到你的模板里面，可以只复制到显示文章的模板中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;disqus_thread&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="cm">/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">disqus_shortname</span> <span class="o">=</span> <span class="s1">&#39;example&#39;</span><span class="p">;</span> <span class="c1">// required: replace example with your forum shortname 这个地方需要改成你配置的网站名</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* * * DON&#39;T EDIT BELOW THIS LINE * * */</span>
</span><span class='line'>    <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">dsq</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span> <span class="nx">dsq</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;text/javascript&#39;</span><span class="p">;</span> <span class="nx">dsq</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">dsq</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">&#39;http://&#39;</span> <span class="o">+</span> <span class="nx">disqus_shortname</span> <span class="o">+</span> <span class="s1">&#39;.disqus.com/embed.js&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">dsq</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})();</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;noscript&gt;</span>Please enable JavaScript to view the <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://disqus.com/?ref_noscript&quot;</span><span class="nt">&gt;</span>comments powered by Disqus.<span class="nt">&lt;/a&gt;&lt;/noscript&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://disqus.com&quot;</span> <span class="na">class=</span><span class="s">&quot;dsq-brlink&quot;</span><span class="nt">&gt;</span>blog comments powered by <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;logo-disqus&quot;</span><span class="nt">&gt;</span>Disqus<span class="nt">&lt;/span&gt;&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置完之后，你也可以做一些异步加载的处理，提高性能，比如我就在最开始页面打开的时候不显示评论，当你想看评论的时候，点击“显示评论”再加载Disqus的模块。代码很简单，你可以参考我的写法。</p>

<pre><code>$('#disqus_container .comment').on('click',function(){
        $(this).html('加载中...');
        var disqus_shortname = 'beiyuu';
        var that = this;
        BYB.includeScript('http://' + disqus_shortname + '.disqus.com/embed.js',function(){$(that).remove()}); //这是一个加载js的函数
});
</code></pre>

<p>如果你不喜欢Disqus的样式，你也可以根据他生成的HTML结构，自己改写样式覆盖它的，Disqus现在也提供每个页面的评论数接口，<a href="http://docs.disqus.com/developers/universal/">帮助文档</a>在这里可以看到。</p>

<h2>代码高亮插件</h2>

<p>如果写技术博客，代码高亮少不了，有两个可选插件<a href="http://mihai.bazon.net/projects/javascript-syntax-highlighting-engine">DlHightLight代码高亮组件</a>和<a href="http://code.google.com/p/google-code-prettify/">Google Code Prettify</a>。DLHightLight支持的语言相对较少一些，有js、css、xml和html，Google的高亮插件基本上任何语言都支持，也可以自定义语言，也支持自动识别，也有行号的特别支持。</p>

<p>Google的高亮插件使用也比较方便，只需要在<code>&lt;pre&gt;</code>的标签上加入<code>prettyprint</code>即可。所以我选择了Google Code Prettify。</p>

<h2>搭建本地jekyll环境</h2>

<p>这里主要介绍一下在Mac OS X下面的安装过程，其他操作系统可以参考官方的<a href="https://github.com/mojombo/jekyll/wiki/Install">jekyll安装</a>。</p>

<p>作为生活在水深火热的墙内人民，有必要进行下面一步修改gem的源，方便我们更快的下载所需组建：</p>

<pre><code>sudo gem sources --remove http://rubygems.org/ 
sudo gem sources -a http://ruby.taobao.org/ 
</code></pre>

<p>然后用Gem安装jekyll</p>

<pre><code>$ gem install jekyll
</code></pre>

<p>不过一般如果有出错提示，你可能需要这样安装：</p>

<pre><code>$ sudo gem install jekyll
</code></pre>

<p>我到了这一步的时候总是提示错误<code>Failed to build gem native extension</code>，很可能的一个原因是没有安装rvm，<a href="https://rvm.io/rvm/install/">rvm的安装</a>可以参考这里，或者敲入下面的命令：</p>

<pre><code>$ curl -L https://get.rvm.io | bash -s stable --ruby
</code></pre>

<p>然后还需要安装Markdown的解释器，这个需要在你的_config.yml里面设置<code>markdown:rdiscount</code>：</p>

<pre><code>$ gem install jekyll rdiscount
</code></pre>

<p>好了，如果一切顺利的话，本地环境就基本搭建完成了，进入之前我们建立的博客目录，运行下面的命令：</p>

<pre><code>$ jekyll --server
</code></pre>

<p>这个时候，你就可以通过<code>localhost:4000</code>来访问了。还有关于<a href="http://jekyllbootstrap.com/">jekyll bootstrap</a>的资料，需要自己修改调试的，可以研究一下。</p>

<p>我在这个过程中还遇到两个诡异的没有解决的问题，一个是我放在根目录下面的blog.md等文件，在GitHub的pages服务上一切正常，可以通过<code>beiyuu.com/blog</code>访问的到，但是在本地环境下，总是<code>not found</code>，很是让人郁闷，看生成的<code>_site</code>目录下面的文件，也是正常的<code>blog.html</code>，但就是找不到，只有当我把URL改为<code>localhost:4000/blog.html</code>的时候，才能访问的到，环境不同真糟糕。</p>

<p>还有一个是关于<code>category</code>的问题，根据<code>YAML</code>的语法，我们在文章头部可以定义文章所属的类别，也可以定义为<code>category:[blog,rss]</code>这样子的多类别，我在本地试一切正常，但是push到GitHub之后，就无法读取了，真让人着急，没有办法，只能采用别的办法满足我的需求了。这里还有一篇<a href="http://chxt6896.github.com/blog/2012/02/13/blog-jekyll-native.html">Jekyll 本地调试之若干问题</a>，安装中如果有其他问题，也可以对照参考一下。</p>

<h2>结语</h2>

<p>如果你跟着这篇不那么详尽的教程，成功搭建了自己的博客，恭喜你！剩下的就是保持热情的去写自己的文章吧。</p>
]]></content>
  </entry>
  
</feed>
